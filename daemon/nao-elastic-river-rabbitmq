#! /bin/sh
### BEGIN INIT INFO
# Provides: nao-elastic-river-rabbitmq
# Required-Start: $local_fs $network
# Required-Stop: $local_fs $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Startup/shutdown script for an ElasticSearch river for RabbitMQ
# Description: Startup/shutdown script for an ElasticSearch river for RabbitMQ
### END INIT INFO

# Author: Nicolas Marniesse
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="ElasticSearch river for RabbitMQ"
NAME=nao-elastic-river-rabbitmq.sh
DAEMON=/usr/bin/$NAME
DAEMON_ARGS="--options args"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
LOCK_FILE="/opt/nao-elastic-river-rabbitmq/.state.lock"
LOG_PATH="/opt/nao-elastic-river-rabbitmq/log"
USER="%user%" # This user has the rights to stop the daemon

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE="yes"

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	if [ -f "$LOCK_FILE" ]; then
        echo "Error, process $PROG is already running. Use 'forcerestart' if needed."
        return 1
    fi

	chown -R $USER:$USER "$LOG_PATH"
	chmod -R 775 "$LOG_PATH"

	"$DAEMON" &

	sleep 2
	chown $USER:$USER "$LOCK_FILE"
	chmod 775 "$LOCK_FILE"

	NB_PROCESS=$(ps -eF | grep $NAME | grep -v grep | wc -l)
	if [ $NB_PROCESS = 0 ]; then
		return 2
	fi
	if [ "$NB_PROCESS" != "0" ]; then
		return 0
	fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	if [ ! -f "$LOCK_FILE" ]; then
		return 1
	fi

	rm -f $LOCK_FILE
	if [ -f "$LOCK_FILE" ]; then
		return 2
	fi
	sleep 2

	# We verify that the dameon is finished
	NB_PROCESS=$(ps -eF | grep $NAME | grep -v grep | wc -l)
	if [ $NB_PROCESS != 0 ]; then
		# Try to force kill
		pkill $NAME
		sleep 1
		NB_PROCESS=$(ps -eF | grep $NAME | grep -v grep | wc -l)
		if [ $NB_PROCESS != 0 ]; then
			return 2
		fi
	fi

	return 0
}

do_status()
{
	# Return
	#   0 if daemon is working
	#   1 if daemon is not working
	NB_PROCESS=$(ps -eF | grep $NAME | grep -v grep | wc -l)
	if [ $NB_PROCESS = 0 ]; then
		return 1;
	fi
	return 0;
}


case "$1" in
  start)
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && echo "Starting $DESC" "$NAME" && echo "          [OK]" ;;
		2) [ "$VERBOSE" != no ] && echo "Starting $DESC" "$NAME" && echo "          [Fail]" ;;
	esac
	;;
  stop)
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && echo "Stopping $DESC" "$NAME" && echo "          [OK]" ;;
		2) [ "$VERBOSE" != no ] && echo "Stopping $DESC" "$NAME" && echo "          [Fail]" ;;
	esac
	;;
  status)
	do_status
	case "$?" in
		0) echo "Daemon is working" ;;
		1) echo "Daemon is not working" ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#echo "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	echo "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) echo "          [OK]" ;;
			1) echo "          [Fail]" ;; # Old process is still running
			*) echo "          [Fail]" ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		echo "          [Fail]"
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
	exit 3
	;;
esac

:
